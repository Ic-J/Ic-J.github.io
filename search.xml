<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>树</title>
      <link href="posts/7b216a3b/"/>
      <url>posts/7b216a3b/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> 算法与数据结构 </category>
          
          <category> 树 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>栈</title>
      <link href="posts/1f4ac2fb/"/>
      <url>posts/1f4ac2fb/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><a id="more"></a><h2 id="顺序栈"><a href="#顺序栈" class="headerlink" title="顺序栈"></a>顺序栈</h2><h3 id="顺序栈的定义"><a href="#顺序栈的定义" class="headerlink" title="顺序栈的定义"></a>顺序栈的定义</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 100   <span class="comment">//顺序栈存储空间的初始分配量</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    SElemType *base;   <span class="comment">//栈底指针</span></span><br><span class="line">    SElemType *top;    <span class="comment">//栈顶指针</span></span><br><span class="line">    <span class="keyword">int</span> stacksize;     <span class="comment">//栈可用的最大容量</span></span><br><span class="line">&#125;SqStack;</span><br></pre></td></tr></table></figure><p>（1）base的值为NULL，表面栈结构不存在<br><br>（2）top初始值指向栈底，插入新栈顶元素，top+1，删除栈顶元素，top-1<br><br>（3）栈非空时，top始终指向栈顶元素的<strong>上一个位置</strong></p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">InitStack</span><span class="params">(SqStack &amp;S)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//构造一个空栈s</span></span><br><span class="line">    S.base=<span class="keyword">new</span> SElemType[MAXSIZE];          <span class="comment">//为顺序栈动态分配一个最大容量为MAXSIZE的数组空间</span></span><br><span class="line">    <span class="keyword">if</span>(!S.base)  <span class="built_in">exit</span>(OVERFLOW);            <span class="comment">//存储分配失败</span></span><br><span class="line">    S.top=S.base;                           <span class="comment">//top初始为base,空栈</span></span><br><span class="line">    S.stacksize=MAXSIZE;                    <span class="comment">//stacksize置为栈的最大容量MAXSIZE</span></span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与数据结构 </category>
          
          <category> 栈 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>顺序表</title>
      <link href="posts/f35acf61/"/>
      <url>posts/f35acf61/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><a id="more"></a><h3 id="程序1：倒置顺序表中的元素"><a href="#程序1：倒置顺序表中的元素" class="headerlink" title="程序1：倒置顺序表中的元素"></a>程序1：倒置顺序表中的元素</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OVERFLOW -2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*创建顺序表*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> *elem;   <span class="comment">//存储空间的基地址</span></span><br><span class="line">    <span class="keyword">int</span> length;       <span class="comment">//线形表中的元素个数</span></span><br><span class="line">&#125;SqList;   <span class="comment">//线性表的存储结构类型为SqList</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">InitList_Sq</span><span class="params">(SqList &amp;L)</span>   <span class="comment">//构造一个空的顺序表L</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    L.elem=<span class="keyword">new</span> <span class="keyword">int</span>[MAXSIZE];   <span class="comment">//为顺序表分配空间</span></span><br><span class="line">    <span class="keyword">if</span>(!L.elem) <span class="built_in">exit</span>(OVERFLOW);     <span class="comment">//存储分配失败</span></span><br><span class="line">    L.length=<span class="number">0</span>;          <span class="comment">//空表长度为0</span></span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*顺序表输入数据*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">(SqList &amp;L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,x;</span><br><span class="line">    i=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入线性表中的元素，用空格隔开，以-1结束输入：&quot;</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">    <span class="keyword">while</span>(x!=<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        L.elem[i]=x;</span><br><span class="line">        i++;</span><br><span class="line">        <span class="keyword">if</span>(i==MAXSIZE)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;已超过顺序表的最大长度&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">    &#125;</span><br><span class="line">    L.length=i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*倒置*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sub</span><span class="params">(SqList &amp;L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,temp,m;</span><br><span class="line">    m=L.length/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        j=L.length<span class="number">-1</span>-i;</span><br><span class="line">        temp=L.elem[i];</span><br><span class="line">        L.elem[i]=L.elem[j];</span><br><span class="line">        L.elem[j]=temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*输出*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(SqList &amp;L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;L.length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; L.elem[i] &lt;&lt; <span class="string">&quot; &quot;</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SqList <span class="built_in">list</span>;</span><br><span class="line">    <span class="keyword">if</span>( InitList_Sq(<span class="built_in">list</span>))</span><br><span class="line">        input(<span class="built_in">list</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;倒置前的顺序表元素：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    output(<span class="built_in">list</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    sub(<span class="built_in">list</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;倒置后的顺序表元素：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    output(<span class="built_in">list</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="程序2：顺序表的基本操作"><a href="#程序2：顺序表的基本操作" class="headerlink" title="程序2：顺序表的基本操作"></a>程序2：顺序表的基本操作</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//函数状态代码</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OVERFLOW -2</span></span><br><span class="line"><span class="comment">//Status 是函数返回值类型，其值是函数结果状态代码</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 10   <span class="comment">//线性表的最大长度</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType *elem;   <span class="comment">//存储空间的基地址</span></span><br><span class="line">    <span class="keyword">int</span> length;       <span class="comment">//线形表中的元素个数</span></span><br><span class="line">&#125;SqList;   <span class="comment">//线性表的存储结构类型为SqList</span></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">InitList_Sq</span><span class="params">(SqList &amp;L)</span>   <span class="comment">//构造一个空的顺序表L</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    L.elem=<span class="keyword">new</span> ElemType[MAXSIZE];   <span class="comment">//为顺序表分配空间</span></span><br><span class="line">    <span class="keyword">if</span>(!L.elem) <span class="built_in">exit</span>(OVERFLOW);     <span class="comment">//存储分配失败</span></span><br><span class="line">    L.length=<span class="number">0</span>;          <span class="comment">//空表长度为0</span></span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*顺序表输入数据*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">(SqList &amp;L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    ElemType x;</span><br><span class="line">    i=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入线性表中的元素，用空格隔开，以-1结束输入：&quot;</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">    <span class="keyword">while</span>(x!=<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        L.elem[i]=x;</span><br><span class="line">        i++;</span><br><span class="line">        <span class="keyword">if</span>(i==MAXSIZE)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;已超过线性表的最大长度&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">    &#125;</span><br><span class="line">    L.length=i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*输出顺序表*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(SqList &amp;L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;线形表中的元素如下：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;L.length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; L.elem[i] &lt;&lt; <span class="string">&#x27; &#x27;</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*插入元素*/</span></span><br><span class="line"><span class="function">Status <span class="title">ListInsert_Sq</span><span class="params">(SqList &amp;L, <span class="keyword">int</span> i, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">1</span> || i&gt;L.length+<span class="number">1</span>) <span class="keyword">return</span> ERROR;  <span class="comment">//i值不合法</span></span><br><span class="line">    <span class="keyword">if</span>(L.length==MAXSIZE) <span class="keyword">return</span> ERROR;  <span class="comment">//当前存储空间已满</span></span><br><span class="line">    <span class="keyword">for</span>(j=L.length<span class="number">-1</span>; j&gt;=i<span class="number">-1</span>; j--)</span><br><span class="line">    &#123;</span><br><span class="line">        L.elem[j+<span class="number">1</span>]=L.elem[j];    <span class="comment">//其他元素后移</span></span><br><span class="line">    &#125;</span><br><span class="line">    L.elem[i<span class="number">-1</span>]=e;   <span class="comment">//插入元素</span></span><br><span class="line">    ++L.length;     <span class="comment">//表长+1</span></span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*删除元素*/</span></span><br><span class="line"><span class="function">Status <span class="title">ListDelete_Sq</span><span class="params">(SqList &amp;L, <span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">1</span> || i&gt;L.length) <span class="keyword">return</span> ERROR;   <span class="comment">//i值不合法</span></span><br><span class="line">    <span class="keyword">for</span>(j=i; j&lt;=L.length<span class="number">-1</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        L.elem[j<span class="number">-1</span>]=L.elem[j];</span><br><span class="line">    &#125;</span><br><span class="line">    --L.length;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*查找元素*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LocateELem</span><span class="params">(SqList L, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;L.length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(L.elem[i]==e)  <span class="keyword">return</span> i+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,m,p,q;</span><br><span class="line">    ElemType a;</span><br><span class="line">    SqList List;</span><br><span class="line">    <span class="keyword">if</span>( InitList_Sq(List) )</span><br><span class="line">        input(List);     <span class="comment">//输入</span></span><br><span class="line">    output(List);        <span class="comment">//输出</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">&quot;请输入你要插入的位置：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;     <span class="comment">//插入元素</span></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; i;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入你要插入的数字元素：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">    ListInsert_Sq(List,i,a);</span><br><span class="line">    output(List);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">&quot;请输入你要删除数字的位置：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">//删除元素</span></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line">    ListDelete_Sq(List, m);</span><br><span class="line">    output(List);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">&quot;请输入你要查找的两个数字：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;    <span class="comment">//查找元素</span></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; p &gt;&gt; q;</span><br><span class="line">    <span class="keyword">if</span>(LocateELem(List,p))</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; p &lt;&lt; <span class="string">&quot;所在的位置为：&quot;</span> &lt;&lt; LocateELem(List,p) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; p &lt;&lt; <span class="string">&quot;不再顺序表中&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">if</span>(LocateELem(List,q))</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; p &lt;&lt; <span class="string">&quot;所在的位置为：&quot;</span> &lt;&lt; LocateELem(List,q) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; q &lt;&lt; <span class="string">&quot;不再顺序表中&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与数据结构 </category>
          
          <category> 顺序表 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>迭代器</title>
      <link href="posts/2cf69f40/"/>
      <url>posts/2cf69f40/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>类似于指针类型，但不适用取地址符</p><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> b = v.begin(), e = v.end();  </span><br><span class="line"><span class="comment">//b表示v的第一个元素，e表示v尾元素的下一位置</span></span><br></pre></td></tr></table></figure><h2 id="迭代器使用"><a href="#迭代器使用" class="headerlink" title="迭代器使用"></a>迭代器使用</h2><h3 id="迭代器运算符"><a href="#迭代器运算符" class="headerlink" title="迭代器运算符"></a>迭代器运算符</h3><table><thead><tr><th>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;表：标准容器迭代器的运算符&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;</th></tr></thead><tbody><tr><td>*iter &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;返回迭代器iter所指向元素的引用</td></tr><tr><td>iter-&gt;mem &emsp;&emsp;&emsp;&emsp;解引用iter并获取该元素的名为mem的成语，等价于(*iter)mem</td></tr><tr><td>++iter&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;令iter指示容器中的下一个元素</td></tr><tr><td>–iter&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;令iter指示容器中的上一个元素</td></tr><tr><td>iter1=/(!)=iter2&emsp;&emsp;&emsp;判断两个迭代器是否相等，若指示同一个元素或者是同一个容器的尾后迭代器，则相等</td></tr></tbody></table><p>代码示例：把string对象中的第一个字面改为大写</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s</span><span class="params">(<span class="string">&quot;laji wangzhe&quot;</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span> ( s.begin() != s.end() )    <span class="comment">//确保s不为空</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">auto</span> it = s.begin();      <span class="comment">//it为s的第一个字符</span></span><br><span class="line">    *it = <span class="built_in">toupper</span>(*it);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="将迭代器从一个元素移动到另外一个元素"><a href="#将迭代器从一个元素移动到另外一个元素" class="headerlink" title="将迭代器从一个元素移动到另外一个元素"></a>将迭代器从一个元素移动到另外一个元素</h3><p>代码示例：把string对象中的第一个字面改为大写</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//依次处理s的字符直至处理完全部字符或者遇到空白</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = s.begin(); it != s.end() &amp;&amp; !<span class="built_in">isspace</span>(*it); ++it)</span><br><span class="line">    *it = <span class="built_in">toupper</span>(*it);</span><br></pre></td></tr></table></figure><h3 id="结合解引用和成员访问操作"><a href="#结合解引用和成员访问操作" class="headerlink" title="结合解引用和成员访问操作"></a>结合解引用和成员访问操作</h3><p>代码示例：检查it指向的字符是否为空</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(*it).empty()   </span><br><span class="line">*it.empty()     <span class="comment">//错误，试图访问it中名为empty的成员，但it是个迭代器，没有成员</span></span><br></pre></td></tr></table></figure><p>代码示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">it -&gt; mem ==  (*it).mem</span><br></pre></td></tr></table></figure><p>代码示例：输出text变量中的第一段内容</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it=text.cbegi(); it!=text.cend(); &amp;&amp; !it-&gt;empty(); ++it)</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><h3 id="某些vector对象的操作会使迭代器失效"><a href="#某些vector对象的操作会使迭代器失效" class="headerlink" title="某些vector对象的操作会使迭代器失效"></a>某些vector对象的操作会使迭代器失效</h3><blockquote><p>但凡是使用了迭代器的循环体，都不要向迭代器所属的vector中添加元素 </p></blockquote><h2 id="迭代器运算"><a href="#迭代器运算" class="headerlink" title="迭代器运算"></a>迭代器运算</h2><p>string和vector的迭代器提供了其他运算符<br><br><img src="/posts/2cf69f40/string%E5%92%8Cvector%E6%94%AF%E6%8C%81%E7%9A%84%E8%BF%AD%E4%BB%A3%E5%99%A8%E8%BF%90%E7%AE%97.png#pic_center=10x10" alt="sting和vector迭代器支持的运算">  <br></p><h3 id="迭代器的算术运算"><a href="#迭代器的算术运算" class="headerlink" title="迭代器的算术运算"></a>迭代器的算术运算</h3><p>代码示例：得到一个迭代器，指向某vector对象中间位置的元素</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> mid = vi.begin() + vi.size() / <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>代码示例：it和mid是同一个vector对象的两个迭代器，比较他们指向的位置</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (it &lt; mid)</span><br><span class="line">    <span class="comment">//其他操作</span></span><br></pre></td></tr></table></figure><h3 id="使用迭代器运算"><a href="#使用迭代器运算" class="headerlink" title="使用迭代器运算"></a>使用迭代器运算</h3><p>代码示例：二分搜索</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//text是有序的</span></span><br><span class="line"><span class="comment">//beg和end表示搜索范围</span></span><br><span class="line"><span class="keyword">auto</span> beg = text.begin(), end = text.end();</span><br><span class="line"><span class="keyword">auto</span> mid = text.begin() + (end - beg)/<span class="number">2</span>;    <span class="comment">//初始状态下的中间点</span></span><br><span class="line"><span class="comment">//当还有元素尚未检查并且还没有找到sought时执行循环</span></span><br><span class="line"><span class="keyword">while</span> (mid != end &amp;&amp; *mid != sought)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (sought &lt; *mid)    <span class="comment">//要找的元素在前半部分吗</span></span><br><span class="line">        end = mid;        <span class="comment">//如果是，调整范围忽略后半部分</span></span><br><span class="line">    <span class="keyword">else</span>                  <span class="comment">//要找的元素在后半部分</span></span><br><span class="line">        beg = mid + <span class="number">1</span>;    <span class="comment">//在mid之后查找</span></span><br><span class="line">    mid = beg + (end -beg)/<span class="number">2</span>;    <span class="comment">//新的中间点，注意写法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 字符串、向量和数组 </category>
          
          <category> 迭代器 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>链表</title>
      <link href="posts/2362a8ea/"/>
      <url>posts/2362a8ea/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><a id="more"></a><h3 id="程序1：单链表的基本操作"><a href="#程序1：单链表的基本操作" class="headerlink" title="程序1：单链表的基本操作"></a>程序1：单链表的基本操作</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OVERFLOW -2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType data;    <span class="comment">//数据域</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span>  <span class="comment">//指针域</span></span><br><span class="line">&#125;LNode,*LinkList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*初始化，构造一个空表*/</span></span><br><span class="line"><span class="function">Status <span class="title">InitList</span><span class="params">(LinkList &amp;L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    L=<span class="keyword">new</span> LNode;</span><br><span class="line">    L-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*取值（后入式）*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateList</span><span class="params">(LinkList &amp;L,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    InitList(L);   <span class="comment">//建立带头节点的单链表L</span></span><br><span class="line">    LinkList r,p;  <span class="comment">//r为尾指针</span></span><br><span class="line">    r=L;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        p=<span class="keyword">new</span> LNode;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; p-&gt;data;</span><br><span class="line">        p-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">        r-&gt;next=p;</span><br><span class="line">        r=p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*输出，显示数据*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Output</span><span class="params">(LinkList L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LinkList p;</span><br><span class="line">    p=L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; p-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*插入*/</span></span><br><span class="line"><span class="function">Status <span class="title">ListInsert</span><span class="params">(LinkList &amp;L, <span class="keyword">int</span> i, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LinkList p,s;</span><br><span class="line">    <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">    p=L;</span><br><span class="line">    <span class="keyword">while</span>(p&amp;&amp;j&lt;i<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">        j++;               </span><br><span class="line">    &#125;                <span class="comment">//寻找第i-1个节点</span></span><br><span class="line">    <span class="keyword">if</span>(!p || j&gt;i<span class="number">-1</span>)            <span class="comment">//i大于表长+1 或者 i&lt;1（不符合规定）</span></span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    s=<span class="keyword">new</span> LNode;</span><br><span class="line">    s-&gt;data=e;</span><br><span class="line">    s-&gt;next=p-&gt;next;</span><br><span class="line">    p-&gt;next=s;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*查找*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LocateElem</span><span class="params">(LinkList L,ElemType &amp;e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LinkList p;</span><br><span class="line">    <span class="keyword">int</span> j=<span class="number">1</span>;</span><br><span class="line">    p=L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p &amp;&amp; p-&gt;data!=e)</span><br><span class="line">    &#123;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p)   <span class="keyword">return</span> j;</span><br><span class="line">    <span class="keyword">else</span>    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*删除*/</span></span><br><span class="line"><span class="function">Status <span class="title">ListDelet</span><span class="params">(LinkList &amp;L,<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LinkList p,q;</span><br><span class="line">    <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">    p=L;</span><br><span class="line">    <span class="keyword">while</span>(p-&gt;next &amp;&amp; j&lt;i<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!(p-&gt;next) || j&gt;i<span class="number">-1</span>)       <span class="comment">//删除位置不合理</span></span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    q=p-&gt;next;         <span class="comment">//临时保存被删除节点的地址以备释放</span></span><br><span class="line">    p-&gt;next=q-&gt;next;    <span class="comment">//链接要删除节点的前后节点</span></span><br><span class="line">   <span class="comment">//e=q-&gt;data;          //保存数据</span></span><br><span class="line">    <span class="keyword">delete</span> q;           <span class="comment">//释放空间</span></span><br><span class="line">    <span class="keyword">return</span> OK;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LinkList L;</span><br><span class="line">    <span class="keyword">int</span> i,j,m;</span><br><span class="line">    ElemType p,q;</span><br><span class="line">    ElemType x;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入即将创建的链表有多少元素：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; i;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入链表中的元素，空格隔开&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    CreateList(L,i);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;您新创建的链表如下：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    Output(L);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入要插入的位置：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; j;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入要插入的元素：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">    ListInsert(L,j,x);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;插入一个元素后的链表如下：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    Output(L);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入要删除第几个数据：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line">    ListDelet(L,m);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;删除一个元素后链表如下：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    Output(L);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入要查找的两个数字，空格隔开：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; p &gt;&gt; q;</span><br><span class="line">    <span class="keyword">if</span>(LocateElem(L,p))</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; p &lt;&lt; <span class="string">&quot;是链表中的第&quot;</span> &lt;&lt; LocateElem(L,p) &lt;&lt; <span class="string">&quot;个元素&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; p &lt;&lt; <span class="string">&quot;不在链表中&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">if</span>(LocateElem(L,q))</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; q &lt;&lt; <span class="string">&quot;是链表中的第&quot;</span> &lt;&lt; LocateElem(L,q) &lt;&lt; <span class="string">&quot;个元素&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; q &lt;&lt; <span class="string">&quot;不在链表中&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="程序2：单链表实现学生信息管理"><a href="#程序2：单链表实现学生信息管理" class="headerlink" title="程序2：单链表实现学生信息管理"></a>程序2：单链表实现学生信息管理</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OVERFLOW -2</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> num[<span class="number">15</span>];</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">15</span>];    </span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">char</span> LeavSch;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span>  </span><br><span class="line">&#125;LNode,*LinkList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*初始化，构造一个空表*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">InitList</span><span class="params">(LinkList &amp;L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    L=<span class="keyword">new</span> LNode;</span><br><span class="line">    L-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*取值（后入式）*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateList</span><span class="params">(LinkList &amp;L,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    InitList(L);   <span class="comment">//建立带头节点的单链表L</span></span><br><span class="line">    LinkList r,p;  <span class="comment">//r为尾指针</span></span><br><span class="line">    r=L;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        p=<span class="keyword">new</span> LNode;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入第&quot;</span> &lt;&lt; i+<span class="number">1</span> &lt;&lt; <span class="string">&quot;个学生的学籍信息：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; p-&gt;num &gt;&gt; p-&gt;name &gt;&gt; p-&gt;age &gt;&gt; p-&gt;LeavSch;</span><br><span class="line">        p-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">        r-&gt;next=p;</span><br><span class="line">        r=p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*输出，显示数据*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Output</span><span class="params">(LinkList L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LinkList p;</span><br><span class="line">    p=L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; p-&gt;num &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; p-&gt;name &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; p-&gt;age &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; p-&gt;LeavSch &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*插入*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ListInsert</span><span class="params">(LinkList &amp;L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LinkList p,q,s;</span><br><span class="line">    q=L-&gt;next;</span><br><span class="line">    p=q-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p)</span><br><span class="line">    &#123;</span><br><span class="line">         p=p-&gt;next;</span><br><span class="line">         q=q-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    s=<span class="keyword">new</span> LNode;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; s-&gt;num &gt;&gt; s-&gt;name &gt;&gt; s-&gt;age &gt;&gt; s-&gt;LeavSch;</span><br><span class="line">    s-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    q-&gt;next=s;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*查找*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LocateElem</span><span class="params">(LinkList L,<span class="keyword">char</span> nump[<span class="number">15</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LinkList p;</span><br><span class="line">    p=L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p &amp;&amp; <span class="built_in">strcmp</span>(p-&gt;num,nump))</span><br><span class="line">    &#123;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p)   </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;该学生的学籍信息如下：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; p-&gt;num &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; p-&gt;name &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; p-&gt;age &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; p-&gt;LeavSch &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;查无此人&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*删除*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListDelet</span><span class="params">(LinkList &amp;L,<span class="keyword">char</span> nump[<span class="number">15</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LinkList p;</span><br><span class="line">    p=L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p &amp;&amp; <span class="built_in">strcmp</span>(p-&gt;num,nump))</span><br><span class="line">    &#123;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    p-&gt;LeavSch=<span class="string">&#x27;Y&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LinkList L;</span><br><span class="line">    <span class="keyword">char</span> gnum[<span class="number">15</span>],fnum[<span class="number">15</span>];</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入学生人数：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; i;</span><br><span class="line">    CreateList(L,i);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;学生学籍信息如下：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    Output(L);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;来了一个新同学，请纳入ta的学籍信息&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    ListInsert(L);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;此时的学生学籍信息如下：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    Output(L);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入要查找学生的学号：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; fnum;</span><br><span class="line">    LocateElem(L,fnum);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入已退学学生的学号：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; gnum;</span><br><span class="line">    ListDelet(L,gnum);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;此时的学生学籍信息如下：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    Output(L);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="程序3：单链表逆置元素"><a href="#程序3：单链表逆置元素" class="headerlink" title="程序3：单链表逆置元素"></a>程序3：单链表逆置元素</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line">方法一：</span><br><span class="line"><span class="comment">/*在单链表中，通过对指针的变换，使得链表逆置。*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>        </span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">int</span> data;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span></span><br><span class="line"></span><br><span class="line">    &#125;Node,*Linklist;</span><br><span class="line"><span class="comment">/*构建链表*/</span></span><br><span class="line"><span class="function">Linklist <span class="title">CreatList</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入数字，输入&#x27;0&#x27;时结束:&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    Linklist L;</span><br><span class="line">    Node *s,*r;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    L=<span class="keyword">new</span> Node;</span><br><span class="line">    L-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    r=L;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">        <span class="keyword">if</span>(x!=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            s=<span class="keyword">new</span> Node;</span><br><span class="line">            s-&gt;data=x;</span><br><span class="line">            s-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">            r-&gt;next=s;</span><br><span class="line">            r=s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*输出显示*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Output</span><span class="params">(Linklist L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *p;</span><br><span class="line">    p=L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; p-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*置换函数*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Reverse</span><span class="params">(Linklist &amp;L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *temp,*pre;</span><br><span class="line"></span><br><span class="line">    pre = L-&gt;next;</span><br><span class="line">    L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(pre)&#123;</span><br><span class="line"></span><br><span class="line">        temp = pre-&gt;next;</span><br><span class="line">        pre-&gt;next = L-&gt;next;</span><br><span class="line">        L-&gt;next = pre;</span><br><span class="line">        pre = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    Linklist L;</span><br><span class="line">    L=CreatList();<span class="comment">//创建单链表</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;该链表中的数据如下：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    Output(L);<span class="comment">//打印输出单链表</span></span><br><span class="line">    Reverse(L);<span class="comment">//逆置单链表</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;逆置后的链表如下：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    Output(L);  <span class="comment">//输出逆置之后的链表</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">方法二：</span><br><span class="line"><span class="comment">/*程序功能：逆置链表，利用两个链表，第一个链表用前插法正常存储数据，第二个链表用第一个链表的数据，进行后插法存储*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;    <span class="comment">//数据域</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span>  <span class="comment">//指针域</span></span><br><span class="line">&#125;LNode,*LinkList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*初始化，构造一个空表*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">InitList</span><span class="params">(LinkList &amp;L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    L=<span class="keyword">new</span> LNode;</span><br><span class="line">    L-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*取值（后入式）*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateList1</span><span class="params">(LinkList &amp;L1,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    InitList(L1);   <span class="comment">//建立带头节点的单链表L</span></span><br><span class="line">    LinkList r,p;  <span class="comment">//r为尾指针</span></span><br><span class="line">    r=L1;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        p=<span class="keyword">new</span> LNode;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; p-&gt;data;</span><br><span class="line">        p-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">        r-&gt;next=p;</span><br><span class="line">        r=p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*取值（前插式）*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateList2</span><span class="params">(LinkList &amp;L1,LinkList &amp;L2,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    InitList(L2);</span><br><span class="line">    LinkList p,q;</span><br><span class="line">    q=L1-&gt;next;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        p=<span class="keyword">new</span> LNode;</span><br><span class="line">        p-&gt;data=q-&gt;data;</span><br><span class="line">        p-&gt;next=L2-&gt;next;</span><br><span class="line">        L2-&gt;next=p;</span><br><span class="line">        q=q-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*输出，显示数据*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Output</span><span class="params">(LinkList L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LinkList p;</span><br><span class="line">    p=L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; p-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LinkList L1,L2;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入链表中元素的个数：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; i;</span><br><span class="line">    CreateList1(L1,i);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;该链表如下：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    Output(L1);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    CreateList2(L1,L2,i);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;该链表逆置后如下：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    Output(L2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法与数据结构 </category>
          
          <category> 链表 </category>
          
          <category> 单链表 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数组</title>
      <link href="posts/340249a9/"/>
      <url>posts/340249a9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><a id="more"></a><p>数组类似于vector，数组的大小确定不变，不能随意增加元素</p><h2 id="定义和初始化内置数组"><a href="#定义和初始化内置数组" class="headerlink" title="定义和初始化内置数组"></a>定义和初始化内置数组</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[<span class="number">10</span>];</span><br></pre></td></tr></table></figure><p>形如c语言，变量名[维度]，维度必须为常量表达式</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 字符串、向量和数组 </category>
          
          <category> 数组 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>标准库类型vector</title>
      <link href="posts/adaa911e/"/>
      <url>posts/adaa911e/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>标准库类型vector表示对象的集合，其中所有的对象类型都相同。集合中的每个对象都有对应的索引，别称“容器”。</p><a id="more"></a><p>使用申明<br></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">vector</span>;</span><br></pre></td></tr></table></figure><h2 id="定义和初始化vector对象"><a href="#定义和初始化vector对象" class="headerlink" title="定义和初始化vector对象"></a>定义和初始化vector对象</h2><table><thead><tr><th>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;表：初始化vector对象的方法&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;</th></tr></thead><tbody><tr><td>vector &lt; T &gt; &emsp;v1&emsp;&emsp;&emsp;&emsp;&emsp;v1是一个空vector，它潜在的元素是T类型的，默认初始化</td></tr><tr><td>vector&lt; T &gt; &emsp;v2(v1)&emsp;&emsp;&emsp;&emsp;v2中包含v1所有元素的副本</td></tr><tr><td>vector&lt; T &gt;&emsp;v2=v1&emsp;&emsp;&emsp;&emsp;等价于v2(v1)</td></tr><tr><td>vector&lt; T &gt;&emsp;v3(n,val)&emsp;&emsp;&emsp;v3包含了n个重复的元素，每个元素的值都是val</td></tr><tr><td>vector&lt; T &gt;&emsp;v4(n)&emsp;&emsp;&emsp;&emsp;&ensp;v4中包含了n个重复地执行了值初始化的对象</td></tr><tr><td>vector&lt; T &gt;&emsp;v5{a,b,c…}&emsp;&emsp;&ensp;v5包含了括号里的这些元素</td></tr><tr><td>vector&lt; T &gt;&emsp;v5={a,b,c…}&emsp;&emsp;同v5{a,b,c…}</td></tr></tbody></table><h3 id="创建一个指定类型的空vector"><a href="#创建一个指定类型的空vector" class="headerlink" title="创建一个指定类型的空vector"></a>创建一个指定类型的空vector<br></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; svec;  <span class="comment">//默认初始化，svec不含任何元素</span></span><br></pre></td></tr></table></figure><h3 id="列表初始化vector对象"><a href="#列表初始化vector对象" class="headerlink" title="列表初始化vector对象"></a>列表初始化vector对象</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; articles = &#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;an&quot;</span>, <span class="string">&quot;the&quot;</span>&#125;;</span><br></pre></td></tr></table></figure><h3 id="创建指定数量的元素"><a href="#创建指定数量的元素" class="headerlink" title="创建指定数量的元素"></a>创建指定数量的元素</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">ivec</span><span class="params">(<span class="number">10</span>, <span class="number">-1</span>)</span></span>;   <span class="comment">//10个值为-1的int型的元素</span></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; <span class="title">svec</span><span class="params">(<span class="number">10</span>, <span class="string">&quot;hi!&quot;</span>)</span></span></span><br></pre></td></tr></table></figure><h2 id="向vector对象中添加元素"><a href="#向vector对象中添加元素" class="headerlink" title="向vector对象中添加元素"></a>向vector对象中添加元素</h2><p>所用函数：<br></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">push_back    <span class="comment">//把一个值当成vector对象放到原vector的尾部</span></span><br></pre></td></tr></table></figure><p>例如：<br></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v2;    <span class="comment">//空vector对象</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i!=<span class="number">100</span>; i++)</span><br><span class="line">    v2.push_back(i);      <span class="comment">//依次把i放在v2尾端</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//输入单词，存入vector中</span></span><br><span class="line"><span class="built_in">string</span> word;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; text;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; word)</span><br><span class="line">&#123;</span><br><span class="line">    text.push_back(word);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在范围for循环中，不能有向vector添加元素的语句，因为范围for语句体内不应改变其所遍历序列的大小</p></blockquote><h2 id="其他vector操作"><a href="#其他vector操作" class="headerlink" title="其他vector操作"></a>其他vector操作</h2><table><thead><tr><th>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;表：vector的一些常用操作&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;</th></tr></thead><tbody><tr><td>v.empty( ) &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;如果v不含有任何元素，返回1，否则返回0</td></tr><tr><td>v.size( ) &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;返回v中元素的个数</td></tr><tr><td>v[n]&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;返回v中第n个位置上元素的引用</td></tr><tr><td>v1=v2&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;v2中的元素拷贝替换v1中的元素</td></tr><tr><td>v1={a,b,c…}&emsp;&emsp;&emsp;&emsp;&emsp;&ensp;用列表中元素的拷贝替换v1中的元素</td></tr><tr><td>v1==v2&emsp;&emsp;&emsp;&ensp;&emsp;&emsp;&emsp;&emsp;v1和v2相等当且仅当“完全相同”</td></tr><tr><td>&lt;,&lt;=,&gt;,&gt;=&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;以字典顺序进行比较</td></tr><tr><td>举例1：<br></td></tr><tr><td>利用范围for语句处理vector对象中的元素<br></td></tr></tbody></table><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i : v)     <span class="comment">//对于v中的每一个元素(i是引用类型)</span></span><br><span class="line">    i*=i;             <span class="comment">//求元素的平方</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i : v)      <span class="comment">//对于v中的每一个元素(i没有用引用类型)</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><h3 id="计算vector的索引（统计各分数段的数量）"><a href="#计算vector的索引（统计各分数段的数量）" class="headerlink" title="计算vector的索引（统计各分数段的数量）"></a>计算vector的索引（统计各分数段的数量）</h3><p>假设有一组成绩（0-100），以10分为一个分数段，统计各个分数段的成绩数量<br></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">unsigned</span>&gt; <span class="title">scores</span><span class="params">( <span class="number">11</span>, <span class="number">0</span>)</span>    <span class="comment">//11个分数段，全部初始化为0</span></span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> grade</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; grade)              <span class="comment">//读取成绩     </span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (grade &lt;= <span class="number">100</span>)             <span class="comment">//只处理有效的成绩</span></span><br><span class="line">        ++scores[grade/<span class="number">10</span>]        <span class="comment">//将对应分数段的计数值都加1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="不能以下标形式添加元素"><a href="#不能以下标形式添加元素" class="headerlink" title="不能以下标形式添加元素"></a>不能以下标形式添加元素</h3><p>错误代码示例：<br><br>试图为vector对象ivec添加10个元素<br></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ivec;       <span class="comment">//空vector对象</span></span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">decltype</span>(ivec.size() ) ix=<span class="number">0</span>; ix!=<span class="number">10</span>; ix++)  <span class="comment">//decltype选择并返回操作数的数据类型</span></span><br><span class="line">    ivec[ix] = ix;      <span class="comment">//错误，ivec不包含任何元素</span></span><br></pre></td></tr></table></figure><p>正确代码示例：<br></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( <span class="keyword">decltype</span>(ivec.size() ) ix=<span class="number">0</span>; ix!=<span class="number">0</span>; ix++)</span><br><span class="line">    ivec.push_back(ix); </span><br></pre></td></tr></table></figure><blockquote><p>vector对象（以及string对象）的下表运算符可用于访问已存在的元素，而不能用于添加元素   </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 字符串、向量和数组 </category>
          
          <category> vector </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Amdahl定律</title>
      <link href="posts/63392b6e/"/>
      <url>posts/63392b6e/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="该定律的主要思想"><a href="#该定律的主要思想" class="headerlink" title="该定律的主要思想"></a>该定律的主要思想</h2><p>当我们对系统的某个部分加速时，其对系统整体性能的影响取决于该部分的<strong>重要性</strong>和<strong>加速程度</strong></p><h2 id="该定律的主要观点"><a href="#该定律的主要观点" class="headerlink" title="该定律的主要观点"></a>该定律的主要观点</h2><p>要想显著加速整个系统，必须提升全系统中相当大的部分速度</p><h2 id="定律内容"><a href="#定律内容" class="headerlink" title="定律内容"></a>定律内容</h2><p>设：<br>Told：原本系统所需时间<br>Tnew：修改后系统所需时间<br>α：（改进的部分/总部分）x100％<br>k：改进的比例<br><br>那么可以得到：<br><br>Tnew=(1-α)Told+(αTold)/k=Told[(1-α)+a/k]<br></p><blockquote><p>加速比s=1/[(1-α)+α/k]=Told/Tnew</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 计算机系统原理 </category>
          
          <category> 一些数学定律 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Markdown常用语法</title>
      <link href="posts/c6b59e99/"/>
      <url>posts/c6b59e99/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Markdown部分常用语法"><a href="#Markdown部分常用语法" class="headerlink" title="Markdown部分常用语法"></a>Markdown部分常用语法</h1><a id="more"></a><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>使用标题是要加#  </p><h2 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h2><p>这是第一段的内容 </p><p>这是第二段的内容</p><h2 id="区块引用"><a href="#区块引用" class="headerlink" title="区块引用"></a>区块引用</h2><blockquote><p>这是一段引用段落，将会被高亮显示 </p></blockquote><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><p><a href="https://www.baidu.com/s?ie=utf-8&word=%E7%99%BE%E5%BA%A6">百度</a></p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p><img src="http://img0.imgtn.bdimg.com/it/u=3488881074,2304449590&fm=26&gp=0.jpg" alt="老马"></p><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><ul><li>无序列表项</li></ul><ul><li>无序列表项</li></ul><ul><li>无序列表项<ul><li>无序列表项<h2 id="有序列表项"><a href="#有序列表项" class="headerlink" title="有序列表项"></a>有序列表项</h2></li></ul></li></ul><ol><li>有序列表项1</li><li>有序列表项2</li><li>有序列表项3  <ol><li>有序列表项</li><li>有序列表项<h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2></li></ol></li></ol><hr><hr><hr><hr><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><h3 id="单行代码"><a href="#单行代码" class="headerlink" title="单行代码"></a>单行代码</h3><p><code>printf(&#39;hello&#39;)</code></p><h3 id="多行代码"><a href="#多行代码" class="headerlink" title="多行代码"></a>多行代码</h3><ul><li><p>在需要高亮的代码块的前一行及后一行使用三个反引号 ```（~ 键）</p></li><li><p>同时第一行反引号后面，输入代码块所使用的语言，实现代码高亮。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line">print(<span class="string">&quot;Hello, World!&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="缩进式插入多行代码"><a href="#缩进式插入多行代码" class="headerlink" title="缩进式插入多行代码"></a>缩进式插入多行代码</h3><p>注意：<br>缩进式插入前方必须有空行；<br>缩进 4 个空格或是 1 个制表符；<br>一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。</p><p>  #include  &lt;stdio.h&gt;<br>  int main(void)`<br>  {</p><pre><code>  printf(&quot;Hello world\n&quot;);</code></pre><p>  }</p><h3 id="字体设置"><a href="#字体设置" class="headerlink" title="字体设置"></a>字体设置</h3></li><li><p>斜体*或<em>斜体</em></p><br></li><li><p>*粗体**</p><br></li><li><p>*<em>加粗斜体**</em></p><br>~~删除线~~</li></ul><h3 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h3><br><h3 id="段首缩进"><a href="#段首缩进" class="headerlink" title="段首缩进"></a>段首缩进</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&amp;ensp; or &amp;#8194; 表示一个半角的空格</span><br><span class="line">&amp;emsp; or &amp;#8195;  表示一个全角的空格</span><br><span class="line">&amp;emsp;&amp;emsp; 两个全角的空格（用的比较多）</span><br><span class="line">&amp;nbsp; or &amp;#160; 不断行的空白格</span><br></pre></td></tr></table></figure><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><table><thead><tr><th>表头</th><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>内容</td><td>内容</td><td>内容</td></tr><tr><td>内容</td><td>内容</td><td>内容</td></tr><tr><td>内容</td><td>内容</td><td>内容</td></tr></tbody></table><h3 id="butterfly标签外挂"><a href="#butterfly标签外挂" class="headerlink" title="butterfly标签外挂"></a>butterfly标签外挂</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note default %&#125;</span><br><span class="line">default 提示标签符</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary no-icon %&#125;</span><br><span class="line">primary 提示标签符</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success %&#125;</span><br><span class="line">success 提示标签符</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info %&#125;</span><br><span class="line">info 提示标签符</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning %&#125;</span><br><span class="line">warning 提示标签符</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger %&#125;</span><br><span class="line">danger 提示标签符</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>标准库类型string</title>
      <link href="posts/287a6bec/"/>
      <url>posts/287a6bec/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>标准库类型string表示可变长的字符序列</p><a id="more"></a><p>使用前包含string头文件：<br></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="定义和初始化string对象"><a href="#定义和初始化string对象" class="headerlink" title="定义和初始化string对象"></a>定义和初始化string对象</h2><table><thead><tr><th>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;表：初始化string对象的方式</th></tr></thead><tbody><tr><td>string s1&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;默认初始化，s1是一个空串</td></tr><tr><td>string s2(s1)&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;s2是s1的副本</td></tr><tr><td>string s2=s1&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;等价于s2(s1),s2是s1的副本</td></tr><tr><td>string s3(“value”)&emsp;&emsp;&emsp;&emsp;s3是字面值”value”的副本，<strong>除了字面值最后那个空字符外</strong></td></tr><tr><td>string s3=”value”&emsp;&emsp;&emsp;&emsp;等价于s3(“value”)，s3是字面值”value”的副本</td></tr><tr><td>string s4(n,’c’)&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;把s4初始化为连续n个字符c组成的串</td></tr></tbody></table><h2 id="直接初始化和拷贝初始化"><a href="#直接初始化和拷贝初始化" class="headerlink" title="直接初始化和拷贝初始化"></a>直接初始化和拷贝初始化</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s5=<span class="string">&quot;baby&quot;</span>;      <span class="comment">//拷贝初始化</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s6</span><span class="params">(<span class="string">&quot;baby&quot;</span>)</span></span>;     <span class="comment">//直接初始化</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s7</span><span class="params">(<span class="number">5</span>,<span class="string">&#x27;c&#x27;</span>)</span></span>;     <span class="comment">//直接初始化，s7的内容是ccccc</span></span><br><span class="line"><span class="built_in">string</span> s8=<span class="built_in">string</span>(<span class="number">5</span>,<span class="string">&#x27;c&#x27;</span>);     <span class="comment">//拷贝初始化（不常用）</span></span><br></pre></td></tr></table></figure><h2 id="string对象上的操作"><a href="#string对象上的操作" class="headerlink" title="string对象上的操作"></a>string对象上的操作</h2><h3 id="读写"><a href="#读写" class="headerlink" title="读写"></a>读写</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s;             <span class="comment">//空字符串</span></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; s;             <span class="comment">//将string对象读入s,遇到空白停止</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="built_in">endl</span>;    <span class="comment">//输出s</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note danger modern"><p>读取时，string对象会自动忽略开头的空白（即空格符、换行符、制表符等）并从第一个真正的字符开始读起，知道遇到下一处空白为止。  </p></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s1,s2;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s1 &gt;&gt; s2;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s1 &lt;&lt; s2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">输入<span class="string">&quot;    hello    world&quot;</span>，输出<span class="string">&quot;helloworld&quot;</span></span><br></pre></td></tr></table></figure><h3 id="读取未知数量的string对象"><a href="#读取未知数量的string对象" class="headerlink" title="读取未知数量的string对象"></a>读取未知数量的string对象</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> word;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="built_in">cin</span> &gt;&gt; word )           <span class="comment">//反复读取，直到到达文件末尾</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; word &lt;&lt; <span class="built_in">endl</span>;       <span class="comment">//逐个输出单词，每个单词后面紧跟一个换行</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用getline读取一整行"><a href="#使用getline读取一整行" class="headerlink" title="使用getline读取一整行"></a>使用getline读取一整行</h3><ul><li>此方法可以保留输入的空格<br></li><li>getline函数的参数是一个输入流和一个string对象<ul><li>函数从给定的输入流中读入内容，知道遇到换行符为止（换行符也被读进来了），然后把所读的内容存入到那个string对象中去（不存入换行符） <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> line;</span><br><span class="line">    <span class="keyword">while</span>( getline(<span class="built_in">cin</span>,line) )      <span class="comment">//每次读入一整行，直到到达文件尾</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; line &lt;&lt; <span class="built_in">endl</span>;       <span class="comment">//endl结束当前行并刷新显示缓存区</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><blockquote><p>触发getline函数返回的那个换行符实际上被丢弃了，得到的string对象中并不包含该换行符    </p></blockquote><h3 id="empty和size操作"><a href="#empty和size操作" class="headerlink" title="empty和size操作"></a>empty和size操作</h3><p>empty函数根据string对象是否为空返回一个对应的布尔值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//每次读入一整行，遇到空行直接跳过</span></span><br><span class="line"><span class="keyword">while</span> ( getline(<span class="built_in">cin</span>,line) )</span><br><span class="line">    <span class="keyword">if</span> ( !line.empty() )</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; line &lt;&lt;<span class="built_in">endl</span>; </span><br></pre></td></tr></table></figure><p>size函数返回string对象的长度（即string对象中字符的个数）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> line;</span><br><span class="line"><span class="keyword">while</span>( getline(<span class="built_in">cin</span>,line))</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; line.size()&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">if</span> ( line.size() &gt; <span class="number">80</span> )      <span class="comment">//输出超过80个字符的行</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; line &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><h3 id="比较string对象"><a href="#比较string对象" class="headerlink" title="比较string对象"></a>比较string对象</h3><p>string对象相等：长度相同，包含的字符全部相同（包括大小写）<br><br><br>常用的比较符号：==、!=、&lt;、&gt;、&lt;=、&gt;=</p><blockquote><p>比较法则：其实是string对象中<strong>第一对相异字符</strong>大小的比较 </p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s1=<span class="string">&quot;abcdefgh&quot;</span></span><br><span class="line"><span class="built_in">string</span> s2=<span class="string">&quot;dfg&quot;</span></span><br><span class="line"><span class="comment">//s2大于s1</span></span><br></pre></td></tr></table></figure><h3 id="为string对象赋值"><a href="#为string对象赋值" class="headerlink" title="为string对象赋值"></a>为string对象赋值</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> st1=(<span class="number">5</span>,<span class="string">&#x27;c&#x27;</span>),st2;       <span class="comment">//st1的内容是ccccc，st2的内容是一个空字符串</span></span><br><span class="line">st1=st2;                      <span class="comment">//赋值：用st2的副本替换st1的内容</span></span><br><span class="line">                              <span class="comment">//此时st1和st2都是空字符串</span></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">### 两个<span class="built_in">string</span>对象相加 </span><br><span class="line">```C++</span><br><span class="line"><span class="built_in">string</span> st1=<span class="string">&quot;hello,&quot;</span>，s2=<span class="string">&quot;world\n&quot;</span>;</span><br><span class="line"><span class="built_in">string</span> st3=s1+s2;               <span class="comment">//s3的内容是hello,world\n</span></span><br></pre></td></tr></table></figure><h3 id="字面值和string对象相加"><a href="#字面值和string对象相加" class="headerlink" title="字面值和string对象相加"></a>字面值和string对象相加</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s1 = <span class="string">&quot;hello&quot;</span> , s2 = <span class="string">&quot;world&quot;</span>;      </span><br><span class="line"><span class="built_in">string</span> s3 = s1 + <span class="string">&quot;,&quot;</span> + s2 + <span class="string">&quot;\n&quot;</span>;</span><br></pre></td></tr></table></figure><blockquote><p>当把string对象和字符字面值和字符串字面值混在一起时，必须确保每个加（+）的两侧至少有一个是string。   </p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s4 = s1 + <span class="string">&quot;,&quot;</span>;                <span class="comment">//正确</span></span><br><span class="line"><span class="built_in">string</span> s5 = <span class="string">&quot;hello&quot;</span> + <span class="string">&quot;,&quot;</span>;           <span class="comment">//错误</span></span><br><span class="line"><span class="built_in">string</span> s6 = s1 + <span class="string">&quot;,&quot;</span> + <span class="string">&quot;world&quot;</span>;      <span class="comment">//正确</span></span><br><span class="line">          = (s1 + <span class="string">&quot;,&quot;</span>) + <span class="string">&quot;world&quot;</span></span><br><span class="line"><span class="built_in">string</span> s7 = <span class="string">&quot;hello&quot;</span> + <span class="string">&quot;,&quot;</span> + s2;      <span class="comment">//错误</span></span><br><span class="line">          =(<span class="string">&quot;hello&quot;</span> + <span class="string">&quot;,&quot;</span>) + s2</span><br></pre></td></tr></table></figure><blockquote><p>字符串字面值与string是不同的类型  </p></blockquote><h2 id="处理string对象中的字符"><a href="#处理string对象中的字符" class="headerlink" title="处理string对象中的字符"></a>处理string对象中的字符</h2><p>cctype 头文件所包含的函数主要用来测试字符值。<br><img src="/posts/287a6bec/cctype%E5%A4%B4%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84%E5%87%BD%E6%95%B0.png#pic_center=10x10" alt="cctype头文件中的函数">  <br></p><h3 id="处理每个字符，使用基于范围的for语句"><a href="#处理每个字符，使用基于范围的for语句" class="headerlink" title="处理每个字符，使用基于范围的for语句"></a>处理每个字符，使用基于范围的for语句</h3><p>范围for(range for)语句，这种语句遍历给定序列中的每个元素并对序列中的<strong>每个值</strong>执行某种操作，其语法形式是：<br><br>&emsp;&emsp;&emsp;&emsp;&emsp; for&emsp;(declaration &emsp;:&emsp;expression)<br><br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;statement<br><br>expression是一个对象，用于表示一个序列，也就是string对象<br><br>declaration定义一个变量，这个变量用于访问序列中的基础元素，每次迭代，形如Python中的for循环中的变量<br><br><br><br>例1：使用范围for语句把string对象中的字符每一行一个输出出来<br></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">str</span><span class="params">(<span class="string">&quot;some string&quot;</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> c : str)              </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; c &lt;&lt; <span class="built_in">endl</span>;       <span class="comment">//输出当前字符，后面紧跟一个换行符</span></span><br></pre></td></tr></table></figure><p>例2：使用范围for语句和ispunct函数来统计string对象中标点符号的个数：<br></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s</span><span class="params">(<span class="string">&quot;Hello World!!!&quot;</span>)</span></span>;</span><br><span class="line"><span class="keyword">int</span> punct_cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> c : s)</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">ispunct</span>(c))</span><br><span class="line">        ++punct_cnt;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; punct_cnt</span><br><span class="line">     &lt;&lt; <span class="string">&quot;  punctuation characters in  &quot;</span> &lt;&lt; s &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><h3 id="使用范围for语句改变字符串中的字符"><a href="#使用范围for语句改变字符串中的字符" class="headerlink" title="使用范围for语句改变字符串中的字符"></a>使用范围for语句改变字符串中的字符</h3><blockquote><p>这里要特别注意,循环的变量必须设定成“引用类型”，因为所谓的引用只是给定对象的别名，因此当使用引用作为循环控制变量时，这个变量实际上被依次绑定到了序列的每个元素上。  </p></blockquote><p>例：把字符串改成大写形式，（使用toupper函数）<br></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s</span><span class="params">(<span class="string">&quot;Hello World!!!&quot;</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;c : s)          <span class="comment">//c是引用</span></span><br><span class="line">    c = <span class="built_in">toupper</span>(c);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><h3 id="处理一部分字符，下标法"><a href="#处理一部分字符，下标法" class="headerlink" title="处理一部分字符，下标法"></a>处理一部分字符，下标法</h3><p>使用下标与python相同<br><br>例1：输出第一个字符<br></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( !s.empty() )         <span class="comment">//确保确实有字符需要输出</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s[<span class="number">0</span>] &lt;&lt;<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><p>例2：将字符串首字母改成大写形式<br></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s</span><span class="params">(<span class="string">&quot;some string&quot;</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span> ( !s.empty() )           <span class="comment">//确保s[0]的位置确实有字符</span></span><br><span class="line">    s[<span class="number">0</span>] = <span class="built_in">toupper</span>( s[<span class="number">0</span>])   </span><br></pre></td></tr></table></figure><p>例3：把字符串中的第一个单词改成大写形式<br> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s</span><span class="params">(<span class="string">&quot;some string&quot;</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">decltype</span>( s.size() ) index=<span class="number">0</span>;  <span class="comment">//decltype自动分析s的类型，然后定义index的类型</span></span><br><span class="line">      index!=s.size() &amp;&amp; !<span class="built_in">isspace</span>(s[index]);</span><br><span class="line">      ++index)</span><br><span class="line">      s[index]=<span class="built_in">toupper</span>(s[index]);</span><br></pre></td></tr></table></figure><h3 id="使用下标执行随机访问"><a href="#使用下标执行随机访问" class="headerlink" title="使用下标执行随机访问"></a>使用下标执行随机访问</h3><p>例：编写一个程序，把0到15之间的十进制数转化成对应的十六进制形式<br></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="built_in">string</span> may=<span class="string">&quot;01234567ABCDEF&quot;</span>;   <span class="comment">//const把may修饰成常量，这里用may表示可能的十六进制数字</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Enter a series of numbers between 0 and 15&quot;</span></span><br><span class="line">     &lt;&lt; <span class="string">&quot; separated by spaces. Hit ENTER when finished: &quot;</span></span><br><span class="line">     &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">string</span> result;      <span class="comment">//用于保存十六进制的字符串</span></span><br><span class="line"><span class="built_in">string</span>::size_type n;   <span class="comment">//用于保存从输入流读取的数</span></span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n)</span><br><span class="line">    <span class="keyword">if</span> (n &lt; may.size() )   <span class="comment">//忽略无效输入</span></span><br><span class="line">        result += may[n];    <span class="comment">//得到对应的十六进制数字</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Your hex numbei is: &quot;</span> &lt;&lt; result &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 字符串、向量和数组 </category>
          
          <category> string </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>进制转换</title>
      <link href="posts/7dc91154/"/>
      <url>posts/7dc91154/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="二、十、十六进制之间的转换"><a href="#二、十、十六进制之间的转换" class="headerlink" title="二、十、十六进制之间的转换"></a>二、十、十六进制之间的转换</h1><a id="more"></a><h2 id="二进制转十六进制"><a href="#二进制转十六进制" class="headerlink" title="二进制转十六进制"></a>二进制转十六进制</h2><p>如果给定一个二进制数字1111001010110110110011，把它每4位一组分开，每4位对应一个十六进制数。如果位总数不是4的倍数，最左边的一组前面补0。<br><br>例如：<br><br>&emsp;&emsp;二进制&emsp;&emsp;11&emsp;1100&emsp;1010&emsp;1101&emsp;1011&emsp;0011<br><br>&emsp;&emsp;十六进制&emsp;3&emsp;&emsp;C&emsp;&emsp;&emsp;A&emsp;&emsp;D&emsp;&emsp;&emsp;B&emsp;&emsp;3<br></p><h2 id="十六进制转二进制"><a href="#十六进制转二进制" class="headerlink" title="十六进制转二进制"></a>十六进制转二进制</h2><p>如果给定一个十六进制数字0x173A4C,展开十六进制数字的每一位，把每一位逐一进行转换。<br><br>例如：<br><br>&emsp;&emsp;十六进制&emsp;1&emsp;&emsp;7&emsp;&emsp;&emsp;3&emsp;&emsp;A&emsp;&emsp;&emsp;4&emsp;&emsp;C<br>&emsp;&emsp;<br><br>&emsp;&emsp;二进制&emsp;0001&emsp;0111&emsp;0011&emsp;1010&emsp;0100&emsp;1100<br></p><h2 id="十进制转十六进制"><a href="#十进制转十六进制" class="headerlink" title="十进制转十六进制"></a>十进制转十六进制</h2><p>给定一个十进制数x，反复的进行16除x，得到一个商q和一个余数r，也就是x=q*16+r，然后用余数继续重复以上步骤，直到商为0。<br><br>例如：将十进制314156转换成十六进制<br><br>&emsp;&emsp;&emsp;&emsp;314156=19634 * 16+12<br><br>&emsp;&emsp;&emsp;&emsp;19634=1227 * 16+2<br><br>&emsp;&emsp;&emsp;&emsp;1227=76 * 16+11<br><br>&emsp;&emsp;&emsp;&emsp;76=4 * 16+12<br><br>&emsp;&emsp;&emsp;&emsp;4=0 * 16+4<br></p><h2 id="十六进制转十进制"><a href="#十六进制转十进制" class="headerlink" title="十六进制转十进制"></a>十六进制转十进制</h2><p>每一位的权重<br><br>例如：0x7AF<br><br>7 * 16^2    +   10 * 16^1    +   15 * 16^0   =  1792+160+15   =   1976<br></p><h2 id="当给定的数字为x-2-n的形式时"><a href="#当给定的数字为x-2-n的形式时" class="headerlink" title="当给定的数字为x=2^n的形式时"></a>当给定的数字为x=2^n的形式时</h2><p>二进制表示为：1后面跟n个0<br><br>十六进制表示为：把n写成*<em>n=i+4 * j*</em>的形式，其中**0&lt;=i&lt;=3**，然后把写成开头的十六进制数字为1(i=0)、2(i=1)、4(i=2)、8(i=3)，后面跟着j个十六进制的0。<br><br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;例如：x=2048=2^11<br><br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;解：n=11=3+4 * 2，从而得到十六进制表示&emsp;:0x800</p>]]></content>
      
      
      <categories>
          
          <category> 计算机系统原理 </category>
          
          <category> 进制转换 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>初学系统小结</title>
      <link href="posts/31b83d7e/"/>
      <url>posts/31b83d7e/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="初步学习计算机系统小结"><a href="#初步学习计算机系统小结" class="headerlink" title="初步学习计算机系统小结"></a>初步学习计算机系统小结</h1><a id="more"></a><p>&emsp;&emsp;计算机系统是由硬件和软件系统组成的，它们共同协作以运行应用程序。计算机内部的信息被表示为一组组的位，他们根据上下文有不同的解释方式。程序被其他程序翻译成不同的形式，开始是ASCII文本，然后被编译器和链接器翻译成二进制可执行文件。<br><br>&emsp;&emsp;处理器读取并解释存放在主存里的二进制指令。因为计算机花费了大量的时间在内存、I/O设备和CPU寄存器之间复制数据，所以将系统中的存储设备划分为成层次结构(图1)——CPU寄存器在顶部，接着是多层的硬件高速缓存存储器、DRAM主存和磁盘存储器。在层次模型中，位于更高层的存储设备比低层的存储设备要更快，单位比特造假也更高。层次结构中较高层次的存储设备可以作为较低层次设备的高速缓存。通过理解和运用这种存储层次结构的知识，程序员可以优化程序性能。<br><br><img src="/posts/31b83d7e/%E5%AD%98%E5%82%A8%E5%99%A8%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84.png" alt="图1">  <br><br>&emsp;&emsp;操作系统内核是应用程序和硬件之间的媒介。它提供三个基本的抽象：1）文件是对I/O设备的抽象；2）虚拟内存是对主存和磁盘的抽象；3）进程是处理器、主存和I/O设备的抽象。<br><br>&emsp;&emsp;网络提供了计算机系统之间通讯的手段。从特殊系统的角度来看，网络就是一种I/O设备。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机系统原理 </category>
          
          <category> 初步了解系统小结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vscode c++配置</title>
      <link href="posts/7c46c74f/"/>
      <url>posts/7c46c74f/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="tasks-json"><a href="#tasks-json" class="headerlink" title="tasks.json"></a>tasks.json</h2><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;version&quot;: &quot;2.0.0&quot;,</span><br><span class="line">    &quot;tasks&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;type&quot;: &quot;shell&quot;,</span><br><span class="line">            &quot;label&quot;: &quot;Build C++&quot;,  &#x2F;&#x2F;名称，与launch中的&quot;preLaunchTask&quot;文件要保持一致</span><br><span class="line">            &quot;command&quot;: &quot;C:\\mingw-w64\\mingw64\\bin\\g++.exe&quot;,          &#x2F;&#x2F;mingW的路径</span><br><span class="line">            &quot;args&quot;: [</span><br><span class="line">                &quot;-g&quot;,</span><br><span class="line">                &quot;$&#123;file&#125;&quot;,</span><br><span class="line">                &quot;-o&quot;,</span><br><span class="line">                &quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;options&quot;: &#123;</span><br><span class="line">                &quot;cwd&quot;: &quot;C:\\mingw-w64\\mingw64\\bin&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;problemMatcher&quot;: [</span><br><span class="line">                &quot;$gcc&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;group&quot;: &quot;build&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="launch-json"><a href="#launch-json" class="headerlink" title="launch.json"></a>launch.json</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 使用 IntelliSense 了解相关属性。 </span><br><span class="line">    &#x2F;&#x2F; 悬停以查看现有属性的描述。</span><br><span class="line">    &#x2F;&#x2F; 欲了解更多信息，请访问: https:&#x2F;&#x2F;go.microsoft.com&#x2F;fwlink&#x2F;?linkid&#x3D;830387</span><br><span class="line">    &quot;version&quot;: &quot;0.2.0&quot;,</span><br><span class="line">    &quot;configurations&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;Debug C++&quot;,   &#x2F;&#x2F;名称，自己起</span><br><span class="line">            &quot;type&quot;: &quot;cppdbg&quot;,</span><br><span class="line">            &quot;request&quot;: &quot;launch&quot;,</span><br><span class="line">            &quot;program&quot;: &quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;,</span><br><span class="line">            &quot;args&quot;: [],</span><br><span class="line">            &quot;stopAtEntry&quot;: false,</span><br><span class="line">            &quot;cwd&quot;: &quot;$&#123;workspaceFolder&#125;&quot;,</span><br><span class="line">            &quot;environment&quot;: [],</span><br><span class="line">            &quot;externalConsole&quot;: false,</span><br><span class="line">            &quot;MIMode&quot;: &quot;gdb&quot;,</span><br><span class="line">            &quot;miDebuggerPath&quot;: &quot;C:\\mingw-w64\\mingw64\\bin\\gdb.exe&quot;,   &#x2F;&#x2F;mingW的路径</span><br><span class="line">            &quot;setupCommands&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;description&quot;: &quot;为 gdb 启用整齐打印&quot;,</span><br><span class="line">                    &quot;text&quot;: &quot;-enable-pretty-printing&quot;,</span><br><span class="line">                    &quot;ignoreFailures&quot;: true</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            &quot;preLaunchTask&quot;: &quot;Build C++&quot;    &#x2F;&#x2F;自己起的名字，与tasks中的&quot;label&quot;保持一致</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DevTools </category>
          
          <category> VScode </category>
          
          <category> C++文件配置 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vscode C语言配置</title>
      <link href="posts/ed50b873/"/>
      <url>posts/ed50b873/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="tasks-json"><a href="#tasks-json" class="headerlink" title="tasks.json"></a>tasks.json</h2><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;version&quot;: &quot;2.0.0&quot;,</span><br><span class="line">    &quot;tasks&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;type&quot;: &quot;shell&quot;,</span><br><span class="line">            &quot;label&quot;: &quot;Build C&quot;,     &#x2F;&#x2F;名称，与launch中的&quot;preLaunchTask&quot;保持一致</span><br><span class="line">            &quot;command&quot;: &quot;C:\\mingw-w64\\mingw64\\bin\\gcc.exe&quot;,  &#x2F;&#x2F;mingW的路径</span><br><span class="line">            &quot;args&quot;: [</span><br><span class="line">                &quot;-g&quot;,</span><br><span class="line">                &quot;$&#123;file&#125;&quot;,</span><br><span class="line">                &quot;-o&quot;,</span><br><span class="line">                &quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;options&quot;: &#123;</span><br><span class="line">                &quot;cwd&quot;: &quot;C:\\mingw-w64\\mingw64\\bin&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;problemMatcher&quot;: [</span><br><span class="line">                &quot;$gcc&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;group&quot;: &quot;build&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="launch-json"><a href="#launch-json" class="headerlink" title="launch.json"></a>launch.json</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 使用 IntelliSense 了解相关属性。 </span><br><span class="line">    &#x2F;&#x2F; 悬停以查看现有属性的描述。</span><br><span class="line">    &#x2F;&#x2F; 欲了解更多信息，请访问: https:&#x2F;&#x2F;go.microsoft.com&#x2F;fwlink&#x2F;?linkid&#x3D;830387</span><br><span class="line">    &quot;version&quot;: &quot;0.2.0&quot;,</span><br><span class="line">    &quot;configurations&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;Debug C&quot;,  &#x2F;&#x2F;名称，自己起</span><br><span class="line">            &quot;type&quot;: &quot;cppdbg&quot;,</span><br><span class="line">            &quot;request&quot;: &quot;launch&quot;,</span><br><span class="line">            &quot;program&quot;: &quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;,</span><br><span class="line">            &quot;args&quot;: [],</span><br><span class="line">            &quot;stopAtEntry&quot;: false,</span><br><span class="line">            &quot;cwd&quot;: &quot;$&#123;workspaceFolder&#125;&quot;,</span><br><span class="line">            &quot;environment&quot;: [],</span><br><span class="line">            &quot;externalConsole&quot;: false,</span><br><span class="line">            &quot;MIMode&quot;: &quot;gdb&quot;,</span><br><span class="line">            &quot;miDebuggerPath&quot;: &quot;C:\\mingw-w64\\mingw64\\bin\\gdb.exe&quot;,   &#x2F;&#x2F;mingW的路径</span><br><span class="line">            &quot;setupCommands&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;description&quot;: &quot;为 gdb 启用整齐打印&quot;,</span><br><span class="line">                    &quot;text&quot;: &quot;-enable-pretty-printing&quot;,</span><br><span class="line">                    &quot;ignoreFailures&quot;: true</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            &quot;preLaunchTask&quot;: &quot;Build C&quot;   &#x2F;&#x2F;自己起名字，与tasks中的&quot;label&quot;保持一致</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DevTools </category>
          
          <category> VScode </category>
          
          <category> C语言文件配置 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
